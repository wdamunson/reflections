What happens when you initialize a repository? Why do you need to do it?
It creates a .git file that tracks the history of all of your commits, without
it there wouldn't be any way to commit your files.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
The staging area allows you to prepare your commit so you only save the changes
that you want to save, making the commits more concise.

How can you use the staging area to make sure you have one commit per logical
change?
You can stage the changes one at a time and commit them one at a time,
therefore separating the changes into different commits.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches are useful if you want to experiment with changes in the code, as well
as creating different versions of a program (such as different languages,
difficulty levels for a game).

How do the diagrams help you visualize the branch structure?
It makes it easier to conceptualize which commits relate to each other and
where the branches split off.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
Merging two branches combines the changes made on both branches together,
and the diagram represents this concept well.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
Automatic merging is convenient and much faster, however there are cases where
git doesn't know which changes to keep and, in that case, manual merging
becomes neccesary.
